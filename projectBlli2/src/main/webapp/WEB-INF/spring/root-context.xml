<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:component-scan base-package="kr.co.blli">
	<context:exclude-filter type="annotation" 
		expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<context:component-scan base-package="org.springframework.security.crypto.bcrypt"/>
	<bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" autowire="default"/>
	<context:component-scan base-package="kr.ac.kaist.swrc.jhannanum"/>
	<bean class="kr.ac.kaist.swrc.jhannanum.hannanum.Workflow" autowire="default">
		<!-- 서버용 -->
		<!-- <constructor-arg name="baseDir" value="/usr/bin/apache-tomcat-7.0.64/webapps/projectBlli2/WEB-INF/classes/jhannanum"/> -->
		<!-- 로컬용 -->
		<constructor-arg name="baseDir" value="C:\Users\용호\git\projectBlli2\projectBlli2\src\main\resources\jhannanum"/>
	</bean>
	
	<!-- model 계층 빈 설정 , AOP설정 비워둠 -->

	<!-- dataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName">
			<value>oracle.jdbc.driver.OracleDriver</value>
		</property>
		<property name="url">
			<!-- 서버용 -->
			<!-- <value>jdbc:oracle:thin:@bllidb.crmhrt8hv6dt.ap-northeast-2.rds.amazonaws.com:1521:ORCL</value> -->
			<!-- 로컬용 -->
			<value>jdbc:oracle:thin:@127.0.0.1:1521:xe</value>
		</property>
		<property name="username">
			<!-- 서버용 -->
			<!-- <value>bllidbadmin</value> -->
			<value>scott</value>
		</property>
		<property name="password">
			<!-- 서버용 -->
			<!-- <value>blliadmin890430</value> -->
			<value>tiger</value>
		</property>
		<property name="maxActive">
			<value>30</value>
		</property>
	</bean>
	<!-- MyBatis 연동 설정 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:mybatis/config/SqlSessionConfig.xml"/>
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	<!-- 트랜잭션 설정 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       <property name="dataSource" ref="dataSource"/>
	</bean>    
	<tx:annotation-driven transaction-manager="transactionManager"/>
		
	<!-- 스프링 시큐리티 설정 -  -->
	<!-- 크리덴셜 기반의 인증을 통해 권한을 제공해준다.(비밀번호를 직접 저장하고, 컨트롤해야할 때  구현해야함)-->
	<bean id="blliAuthenticationProvider" class="kr.co.blli.model.security.BlliAuthenticationProvider"/>
	<!-- 비밀번호 이외의, user의 아이디와 oAuth,쿠키를 통한 로그인을 필요로 할때 사용되는 객체 -->
	<bean id="blliUserDetailsService" class="kr.co.blli.model.security.BlliUserDetailsService"/>
	<!-- Spring security가 db에 접근할 수 있도록 도와주는 클래스로서 dataSource객체를 멤버로 가진다. -->
	<bean id="persistentTokenRepository" 
	class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="blliAuthenticationProvider"/>
	</security:authentication-manager>

 
	<!-- 스프링 시큐리트 설정 - 유알엘 패턴에 따른 접근 권한 제한 , 로그인 및 로그아웃 폼 커스터마이징 -->
	<security:http use-expressions="true">
		<security:intercept-url pattern="/admin_*" access="hasAuthority('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/member_*" access="hasAuthority('ROLE_USER')" requires-channel=""/>
		<security:intercept-url pattern="/memberjoin_*" access="isAnonymous()"/>
		<security:intercept-url pattern="/**" access="permitAll"/>
		<security:form-login
			username-parameter="memberId"
			password-parameter="memberPassword"
			login-page="/loginPage.do"
			default-target-url="/member_proceedingToMain.do"
			authentication-failure-url="/loginPage.do?loginFail=true"
			authentication-success-handler-ref="blliAuthenticationSuccessHandler"
		/>                
		<security:logout
			invalidate-session="true"
			logout-url="/logout.do"
			logout-success-url="/index.do"
			delete-cookies="JSESSIONID"
		/>
		<security:remember-me services-ref="rememberMeServices" key="blli" 
		authentication-success-handler-ref="blliAuthenticationSuccessHandler"/>
	</security:http>	
	
	<bean id="blliAuthenticationSuccessHandler" 
		class="kr.co.blli.model.security.BlliAuthenticationSuccessHandler"/>
	<bean id="rememberMeServices"
	   class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices"> 
		<property name="tokenRepository" ref="persistentTokenRepository" /> 
	    <property name="userDetailsService" ref="blliUserDetailsService" /> 
	    <property name="key" value="blli" /> 
	    <property name="alwaysRemember" value="true" /> 
	</bean> 
	   
	<!-- velocity 설정 -->
	<bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="WEB-INF/velocity" />
	</bean>
	
	<!-- mailSender 설정 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<!-- gmail (worksmobile에서 보낸 것으로 설정)-->
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="blli150608" />
		<property name="password" value="wzylaavucuvlpvwh" />
		
		<property name="defaultEncoding" value="utf-8" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
	</bean>
	
	<!-- spring-task 설정 -->
	<task:scheduler id="jobScheduler" pool-size="10" />
	<task:annotation-driven scheduler="jobScheduler" />
	
	
	<!-- quartz를 이용한 스케줄링 -->
	<!-- <bean id="mailScheduler" class="kr.co.blli.model.scheduler.MailScheduler"/>
	 
	<bean id="jobDetailFactoryBean"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="mailScheduler" />
		<property name="targetMethod" value="schedulerTester" />
		<property name="concurrent" value="false" />
	</bean>
	
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
   		<property name="jobDetail" ref="jobDetailFactoryBean" />
	</bean>
	
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean> -->

</beans>
