<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="posting"> 
 	<!-- BlliPostingVO Result Map 설정 -->
 	<resultMap type="blliPostingVO" id="bpvRM">
 		<result property="postingUrl" column="posting_url"/>
 		<result property="postingTitle" column="posting_title"/>
 		<result property="postingSummary" column="posting_summary"/>
 		<result property="postingContent" column="posting_content"/>
 		<result property="postingScore" column="posting_score"/>
 		<result property="postingLikeCount" column="posting_like_count"/>
 		<result property="postingDislikeCount" column="posting_dislike_count"/>
 		<result property="postingMediaCount" column="posting_media_count"/>
 		<result property="postingPhotoLink" column="posting_photo_link"/>
 		<result property="postingStatus" column="posting_status"/>
 		<result property="postingTotalResidenceTime" column="posting_total_residence_time"/>
 		<result property="postingViewCount" column="posting_view_count"/>
 		<result property="postingScrapeCount" column="posting_scrape_count"/>
 		<result property="postingAuthor" column="posting_author"/>
 		<result property="postingDate" column="posting_date"/>
 		<result property="postingRank" column="posting_rank"/>
 		<result property="postingReplyCount" column="posting_reply_count"/>
 		<result property="smallProduct" column="small_product"/>
 		<result property="smallProductId" column="small_product_id"/>
 		<result property="postingDbInsertDate" column="posting_Db_Insert_Date"/>
 	</resultMap>
 	<!-- 현석 쿼리 시작 -->
 	<select id="countOfPostingUrl" resultType="int">
 		select count(posting_url) from blli_posting where posting_url = #{postingUrl}
 	</select>
 	
 	<!-- <select id="getPostingStatus" resultType="String">
 		select posting_status from blli_posting where posting_url = #{postingUrl}
 	</select> -->
 	
 	<select id="getAllPostingStatus" resultType="String">
 		select posting_status from blli_posting where posting_url = #{postingUrl}
 	</select>
 	
 	<select id="getPostingStatus" resultType="String">
 		select posting_status from blli_posting where posting_url like '%' || #{postingUrl} || '%' and small_product_id = #{smallProductId} and posting_title = #{postingTitle}
 	</select>
 	
 	<update id="updatePosting">
 		<!-- update blli_posting set posting_rank = #{postingRank}, posting_reply_count = #{postingReplyCount} 
 		where posting_url like '%' || #{postingUrl} || '%' and small_product_id = #{smallProductId} -->
 		update blli_posting set posting_rank = #{postingRank}
 		where posting_url like '%' || #{postingUrl} || '%' and small_product_id = #{smallProductId}
 	</update>
 	
 	<insert id="insertPosting">
 		insert into blli_posting(small_product_id, posting_url, small_product, posting_title, posting_photo_link, posting_media_count, 
 		posting_content, posting_summary, posting_author, posting_date, posting_rank, posting_reply_count, posting_status, posting_db_insert_date)
 		values(#{smallProductId}, #{postingUrl}, #{smallProduct}, #{postingTitle}, #{postingPhotoLink}, #{postingMediaCount}, 
 		#{postingContent}, #{postingSummary}, #{postingAuthor}, #{postingDate}, #{postingRank}, #{postingReplyCount}, 'unconfirmed', sysdate)
 	</insert>
 	
 	<insert id="insertDeadPosting">
 		insert into blli_posting(small_product_id, posting_url, small_product, posting_title, posting_photo_link, posting_media_count, 
 		posting_content, posting_summary, posting_author, posting_date, posting_rank, posting_reply_count, posting_status, posting_db_insert_date)
 		values(#{smallProductId}, #{postingUrl}, ' ', ' ', ' ', 0, ' ', ' ', ' ', sysdate, 0, 0, 'dead', sysdate)
 	</insert>

	<select id="searchPosting" resultMap="bpvRM">
		select posting_url, posting_title, posting_photo_link, posting_summary, posting_score, small_product, posting_scrape_count, 
		posting_like_count, posting_dislike_count, posting_author, posting_date from(
			select ceil(rownum/5) as page, posting_url, posting_title, posting_photo_link, posting_summary, posting_score, small_product, 
			posting_scrape_count, posting_like_count, posting_dislike_count, posting_author, posting_date from(
				select posting_url, posting_title, posting_photo_link, posting_summary, posting_score, small_product, 
				posting_scrape_count, posting_like_count, posting_dislike_count, posting_author, to_char(posting_date, 'YYYY.MM.DD') as posting_date 
				from blli_posting where small_product like '%' || #{searchWord} || '%' and posting_status = 'confirmed' order by posting_score desc
			)
		) where page = #{pageNo}
	</select>
	
	<select id="totalPageOfPosting" resultType="int">
		select max(ceil(rownum/5)) from blli_posting where small_product like '%' || #{searchWord} || '%' and posting_status = 'confirmed'
	</select>
	
	<select id="searchProducts" resultType="String">
		select small_product from blli_posting where posting_url = #{postingUrl}
	</select>
	
	<select id="searchPostingListInProductDetail" resultMap="bpvRM">
		select posting_url, posting_photo_link, posting_title from blli_posting where small_product = #{searchWord} and posting_status = 'confirmed' order by posting_score desc
	</select>
	<!-- 현석 쿼리 끝 -->
	
	<!-- 준영쿼리 시작 -->
	<select id="selectPostingBySmallProductList" resultMap="bpvRM" parameterType="map">
		select * from(
		select rownum rn ,posting_url,small_product,small_product_id,posting_title,posting_summary,posting_content,posting_score,posting_like_count,
		posting_dislike_count,posting_media_count,posting_photo_link,posting_total_residence_time,posting_view_count,posting_scrape_count,posting_author,posting_date
		from(
		select posting_url,small_product,small_product_id,posting_title,posting_summary,posting_content,posting_score,posting_like_count,
		posting_dislike_count,posting_media_count,posting_photo_link,posting_total_residence_time,posting_view_count,posting_scrape_count,posting_author,posting_date
		from blli_posting
		where posting_status = 'confirmed' and small_product_id = #{smallProductId}
		order by posting_score desc)
		) where rn = #{pageNum}
	</select>
	<!-- 포스팅 스크랩관련 쿼리 -->
	<delete id="deletePostingScrapeInfo">
		delete from blli_member_scrape where member_id=#{memberId} and small_product_id = #{smallProductId}
	</delete>
	<insert id="insertPostingScrape">
		insert into blli_member_scrap (member_id,small_product_id,posting_url,scrape_time) values (#{memberId},#{smallProductId},#{postingUrl},sysdate)
	</insert>
	<update id="updatePlusPostingScrapeCount">
		update blli_posting set posting_scrape_count = posting_scrape_count+1 where small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</update>
	<update id="updateMinusPostingScrapeCount">
		update blli_posting set posting_scrape_count = posting_scrape_count-1 where small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</update>
	<!-- 포스팅 좋아요관련 쿼리 -->
	<delete id="deletePostingLikeInfo">
		delete from blli_posting_like where member_id=#{memberId} and small_product_id = #{smallProductId}
	</delete>
	<insert id="insertPostingLikeInfo">
		insert into blli_posting_like (member_id,small_product_id,posting_url,like_time) values (#{memberId},#{smallProductId},#{postingUrl},sysdate)
	</insert>
	<update id="updatePlusPostingLikeCount">
		update blli_posting set posting_like_count = posting_like_count+1 where small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</update>
	<update id="updateMinusPostingLikeCount">
		update blli_posting set posting_like_count = posting_like_count-1 where small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</update>
	<!-- 포스팅 싫어요관련 쿼리 -->
	<delete id="deletePostingDisLikeInfo">
		delete from blli_posting_dislike where member_id=#{memberId} and small_product_id = #{smallProductId}
	</delete>
	<insert id="insertPostingDisLikeInfo">
		insert into blli_posting_dislike (member_id,small_product_id,posting_url,dislike_time) values (#{memberId},#{smallProductId},#{postingUrl},sysdate)
	</insert>
	<update id="updatePlusPostingDisLikeCount">
		update blli_posting set posting_dislike_count = posting_dislike_count+1 where small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</update>
	<update id="updateMinusPostingDisLikeCount">
		update blli_posting set posting_dislike_count = posting_dislike_count-1 where small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</update>
	
	<!-- 회원이 포스팅을  스크랩했는지 여부를 반환 -->
	<select id="selectThisPostingScrape" resultType="Integer">
		select count(*) from blli_member_scrape where member_Id=#{memberId} and small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</select>
	<!-- 회원이 포스팅을  좋아요 여부를 반환 -->
	<select id="selectThisPostingLike" resultType="Integer">
		select count(*) from blli_posting_like where member_Id=#{memberId} and small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</select>
	<!-- 회원이 포스팅을 싫어요여부를 반환 -->
	<select id="selectThisPostingDisLike" resultType="Integer">
		select count(*) from blli_posting_dislike where member_Id=#{memberId} and small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</select>
	<!-- 모든 포스팅을 리스트로 반환 -->
	<select id="selectAllPosting" resultMap="bpvRM">
		select posting_url,small_product_id,posting_like_count,posting_dislike_count,
		posting_media_count,posting_total_residence_time,posting_view_count,posting_scrape_count,posting_rank,posting_date,posting_reply_count,posting_db_insert_date
		from blli_posting
		where posting_status = 'confirmed'
	</select>
	<!-- 포스팅 점수 부여 -->
	<update id="updatePostingScore">
		update blli_posting set posting_score = #{postingScore} where small_product_id=#{smallProductId} and posting_url=#{postingUrl}
	</update>
	<!-- 준영 쿼리 끝 -->
	<update id="updatePostingViewCountAndResidenceTime">
		update blli_posting set posting_total_residence_time = posting_total_residence_time + #{postingTotalResidenceTime} , posting_view_count = posting_view_count+1
 		where posting_url = #{postingUrl} and small_product_id = #{smallProductId}
	</update>
 </mapper> 		
 
 
 
 
 
 
 
 
 
 
 
 
 
















